// bcm.dl
/*
 * FRT - A Godot platform targeting single board computers
 * Copyright (c) 2017-2019  Emanuele Fornara
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

#include <bcm_host.h>

typedef void (*___bcm_host_init___)();
typedef int32_t (*___graphics_get_display_size___)(const uint16_t display_number, uint32_t *width, uint32_t *height);
typedef DISPMANX_DISPLAY_HANDLE_T (*___vc_dispmanx_display_open___)(uint32_t device);
typedef int (*___vc_dispmanx_display_close___)(DISPMANX_DISPLAY_HANDLE_T display);
typedef DISPMANX_RESOURCE_HANDLE_T (*___vc_dispmanx_resource_create___)(VC_IMAGE_TYPE_T type, uint32_t width, uint32_t height, uint32_t *native_image_handle);
typedef int (*___vc_dispmanx_resource_write_data___)(DISPMANX_RESOURCE_HANDLE_T res, VC_IMAGE_TYPE_T src_type, int src_pitch, void * src_address, const VC_RECT_T * rect);
typedef int (*___vc_dispmanx_resource_delete___)(DISPMANX_RESOURCE_HANDLE_T res);
typedef int (*___vc_dispmanx_rect_set___)(VC_RECT_T *rect, uint32_t x_offset, uint32_t y_offset, uint32_t width, uint32_t height);
typedef DISPMANX_ELEMENT_HANDLE_T (*___vc_dispmanx_element_add___)(DISPMANX_UPDATE_HANDLE_T update, DISPMANX_DISPLAY_HANDLE_T display, int32_t layer, const VC_RECT_T *dest_rect, DISPMANX_RESOURCE_HANDLE_T src, const VC_RECT_T *src_rect, DISPMANX_PROTECTION_T protection, VC_DISPMANX_ALPHA_T *alpha, DISPMANX_CLAMP_T *clamp, DISPMANX_TRANSFORM_T transform);
typedef int (*___vc_dispmanx_element_remove___)(DISPMANX_UPDATE_HANDLE_T update, DISPMANX_ELEMENT_HANDLE_T element);
typedef int (*___vc_dispmanx_element_change_attributes___)(DISPMANX_UPDATE_HANDLE_T update, DISPMANX_ELEMENT_HANDLE_T element, uint32_t change_flags, int32_t layer, uint8_t opacity, const VC_RECT_T *dest_rect, const VC_RECT_T *src_rect, DISPMANX_RESOURCE_HANDLE_T mask, DISPMANX_TRANSFORM_T transform);
typedef DISPMANX_UPDATE_HANDLE_T (*___vc_dispmanx_update_start___)(int32_t priority);
typedef int (*___vc_dispmanx_update_submit_sync___)(DISPMANX_UPDATE_HANDLE_T update);
typedef int (*___vc_dispmanx_update_submit___)(DISPMANX_UPDATE_HANDLE_T update, DISPMANX_CALLBACK_FUNC_T cb_func, void *cb_arg);
